Namespace(batch_size=16, beta1=0.5, beta2=0.999, checkpoint_dir='./checkpoints_vanilla', checkpoint_every=400, conv_dim=32, emoji='Apple', image_size=32, log_step=10, lr=0.0003, noise_size=100, num_epochs=40, num_workers=0, sample_dir='./samples_vanilla', sample_every=200)
                    G                  
---------------------------------------
DCGenerator(
  (deconv1): Sequential(
    (0): ConvTranspose2d (100, 128, kernel_size=(4, 4), stride=(2, 2), bias=False)
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
  )
  (deconv2): Sequential(
    (0): ConvTranspose2d (128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
  )
  (deconv3): Sequential(
    (0): ConvTranspose2d (64, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
  )
  (deconv4): Sequential(
    (0): ConvTranspose2d (32, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  )
)
---------------------------------------
                    D                  
---------------------------------------
DCDiscriminator(
  (conv1): Sequential(
    (0): Conv2d (3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
  )
  (conv2): Sequential(
    (0): Conv2d (64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
  )
  (conv3): Sequential(
    (0): Conv2d (128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
  )
  (conv4): Sequential(
    (0): Conv2d (256, 1, kernel_size=(4, 4), stride=(2, 2), bias=False)
  )
)
---------------------------------------
Iteration [  10/5680] | D_real_loss: 0.1618 | D_fake_loss: 0.1038 | G_loss: 0.6218
Iteration [  20/5680] | D_real_loss: 0.0355 | D_fake_loss: 0.0873 | G_loss: 0.7845
Iteration [  30/5680] | D_real_loss: 0.0326 | D_fake_loss: 0.0358 | G_loss: 0.8827
Iteration [  40/5680] | D_real_loss: 0.0064 | D_fake_loss: 0.0130 | G_loss: 0.9078
Iteration [  50/5680] | D_real_loss: 0.0160 | D_fake_loss: 0.0107 | G_loss: 0.9049
Iteration [  60/5680] | D_real_loss: 0.0069 | D_fake_loss: 0.0015 | G_loss: 0.9301
Iteration [  70/5680] | D_real_loss: 0.0006 | D_fake_loss: 0.0001 | G_loss: 0.9390
Iteration [  80/5680] | D_real_loss: 0.0079 | D_fake_loss: 0.0021 | G_loss: 0.8390
Iteration [  90/5680] | D_real_loss: 0.0980 | D_fake_loss: 0.0046 | G_loss: 0.9570
